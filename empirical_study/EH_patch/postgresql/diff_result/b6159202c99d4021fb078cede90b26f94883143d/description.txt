{
    "author": "Tom Lane",
    "description": "Fix memory leakage in ICU encoding conversion, and other code review.\n\nCallers of icu_to_uchar() neglected to pfree the result string when done\nwith it.  This results in catastrophic memory leaks in varstr_cmp(),\nbecause of our prevailing assumption that btree comparison functions don't\nleak memory.  For safety, make all the call sites clean up leaks, though\nI suspect that we could get away without it in formatting.c.  I audited\ncallers of icu_from_uchar() as well, but found no places that seemed to\nhave a comparable issue.\n\nAdd function API specifications for icu_to_uchar() and icu_from_uchar();\nthe lack of any thought-through specification is perhaps not unrelated\nto the existence of this bug in the first place.  Fix icu_to_uchar()\nto guarantee a nul-terminated result; although no existing caller appears\nto care, the fact that it would have been nul-terminated except in\nextreme corner cases seems ideally designed to bite someone on the rear\nsomeday.  Fix ucnv_fromUChars() destCapacity argument --- in the worst\ncase, that could perhaps have led to a non-nul-terminated result, too.\nFix icu_from_uchar() to have a more reasonable definition of the function\nresult --- no callers are actually paying attention, so this isn't a live\nbug, but it's certainly sloppily designed.  Const-ify icu_from_uchar()'s\ninput string for consistency.\n\nThat is not the end of what needs to be done to these functions, but\nit's as much as I have the patience for right now.\n\nDiscussion: https://postgr.es/m/1955.1498181798@sss.pgh.pa.us\n",
    "summary": "Fix memory leakage in ICU encoding conversion, and other code review.",
    "date": "2017-06-23 12:22:06",
    "parent_hash": "8be8510cf89d4e150816941029d7cdddfe9aa474",
    "hash": "b6159202c99d4021fb078cede90b26f94883143d"
}